{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u50b2\u8f6f\u62a0\u56fe(Android)\u9879\u76ee\u6587\u6863 AI\u667a\u80fd\u62a0\u56fe\uff0c\u4e00\u952e\u6362\u80cc\u666f\u3002 \u50b2\u8f6f\u62a0\u56fe\u662f\u4e00\u6b3eAI\u667a\u80fd\u62a0\u56fe\u8f6f\u4ef6\uff0c3\u79d2\u5185\u5b8c\u6210\u81ea\u52a8\u62a0\u56fe\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8f6f\u4ef6\u5185\u7f16\u8f91\u5de5\u5177\u7ee7\u7eed\u521b\u4f5c\u56fe\u7247\u3002\u65e0\u8bba\u662f\u4e2a\u4eba\u7167\u7247\u3001\u7535\u5546\u56fe\u7247\u6216\u8425\u9500\u8bbe\u8ba1\u56fe\uff0c\u6709\u4e86AI\u667a\u80fd\u7684\u5e2e\u52a9\uff0c\u56fe\u7247\u521b\u4f5c\u5c06\u53d8\u5f97\u7b80\u5355\u3001\u7701\u65f6\u3001\u6709\u8da3\u3002 \u4e3b\u8981\u529f\u80fd\u6709\uff1a \u7167\u7247\u53bb\u6c34\u5370 \uff1a\u4e00\u952e\u53bb\u9664\u7167\u7247\u4e2d\u7684\u6c34\u5370\u3002 \u8bc1\u4ef6\u7167 \uff1a\u4e00\u952e\u5236\u4f5c\u8bc1\u4ef6\u7167\u3002 \u62a0\u56fe(\u4eba\u50cf\u3001\u7269\u54c1\u3001\u56fe\u7ae0) \uff1a\u4e00\u952e\u62a0\u51fa\u7167\u7247\u4e2d\u7684\u4eba\u50cf\u3001\u7269\u54c1\u3001\u56fe\u7ae0\uff0c\u53bb\u6389\u5176\u4e2d\u7684\u80cc\u666f\u3002 \u62a0\u56fe\u6a21\u677f \uff1a\u4f7f\u7528\u6a21\u677f\u3001\u62a0\u56fe\u6765\u5236\u4f5c\u5408\u6210\u56fe\u7247\u3002 \u6211\u7684 \uff1a\u7528\u6237\u4fe1\u606f\u3001\u4f1a\u5458\u4fe1\u606f\u3001\u65e5\u5fd7\u53cd\u9988\u3001\u5173\u4e8e\u6211\u4eec\u7b49\u754c\u9762\u3002 \u50b2\u8f6f\u62a0\u56fe\u7684\u6838\u5fc3\u662f\u56f4\u7ed5\u62a0\u56fe\u4e1a\u52a1\u6765\u5c55\u5f00\u7684\u3002 \u8bc1\u4ef6\u7167 \u3001 \u62a0\u56fe \u3001 \u62a0\u56fe\u6a21\u677f \u7684\u6838\u5fc3\u90fd\u662f\u4f7f\u7528\u7684\u62a0\u56fe\uff0c\u62a0\u56fe\u4e5f\u662f\u9879\u76ee\u4e2d\u6700\u4e3a\u590d\u6742\u7684\u4e1a\u52a1\u6a21\u5757\u3002","title":"\u50b2\u8f6f\u62a0\u56fe"},{"location":"#android","text":"AI\u667a\u80fd\u62a0\u56fe\uff0c\u4e00\u952e\u6362\u80cc\u666f\u3002 \u50b2\u8f6f\u62a0\u56fe\u662f\u4e00\u6b3eAI\u667a\u80fd\u62a0\u56fe\u8f6f\u4ef6\uff0c3\u79d2\u5185\u5b8c\u6210\u81ea\u52a8\u62a0\u56fe\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8f6f\u4ef6\u5185\u7f16\u8f91\u5de5\u5177\u7ee7\u7eed\u521b\u4f5c\u56fe\u7247\u3002\u65e0\u8bba\u662f\u4e2a\u4eba\u7167\u7247\u3001\u7535\u5546\u56fe\u7247\u6216\u8425\u9500\u8bbe\u8ba1\u56fe\uff0c\u6709\u4e86AI\u667a\u80fd\u7684\u5e2e\u52a9\uff0c\u56fe\u7247\u521b\u4f5c\u5c06\u53d8\u5f97\u7b80\u5355\u3001\u7701\u65f6\u3001\u6709\u8da3\u3002 \u4e3b\u8981\u529f\u80fd\u6709\uff1a \u7167\u7247\u53bb\u6c34\u5370 \uff1a\u4e00\u952e\u53bb\u9664\u7167\u7247\u4e2d\u7684\u6c34\u5370\u3002 \u8bc1\u4ef6\u7167 \uff1a\u4e00\u952e\u5236\u4f5c\u8bc1\u4ef6\u7167\u3002 \u62a0\u56fe(\u4eba\u50cf\u3001\u7269\u54c1\u3001\u56fe\u7ae0) \uff1a\u4e00\u952e\u62a0\u51fa\u7167\u7247\u4e2d\u7684\u4eba\u50cf\u3001\u7269\u54c1\u3001\u56fe\u7ae0\uff0c\u53bb\u6389\u5176\u4e2d\u7684\u80cc\u666f\u3002 \u62a0\u56fe\u6a21\u677f \uff1a\u4f7f\u7528\u6a21\u677f\u3001\u62a0\u56fe\u6765\u5236\u4f5c\u5408\u6210\u56fe\u7247\u3002 \u6211\u7684 \uff1a\u7528\u6237\u4fe1\u606f\u3001\u4f1a\u5458\u4fe1\u606f\u3001\u65e5\u5fd7\u53cd\u9988\u3001\u5173\u4e8e\u6211\u4eec\u7b49\u754c\u9762\u3002 \u50b2\u8f6f\u62a0\u56fe\u7684\u6838\u5fc3\u662f\u56f4\u7ed5\u62a0\u56fe\u4e1a\u52a1\u6765\u5c55\u5f00\u7684\u3002 \u8bc1\u4ef6\u7167 \u3001 \u62a0\u56fe \u3001 \u62a0\u56fe\u6a21\u677f \u7684\u6838\u5fc3\u90fd\u662f\u4f7f\u7528\u7684\u62a0\u56fe\uff0c\u62a0\u56fe\u4e5f\u662f\u9879\u76ee\u4e2d\u6700\u4e3a\u590d\u6742\u7684\u4e1a\u52a1\u6a21\u5757\u3002","title":"\u50b2\u8f6f\u62a0\u56fe(Android)\u9879\u76ee\u6587\u6863"},{"location":"Google%20Play%E8%AE%A2%E9%98%85%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3/","text":"\u6784\u5efa OverseaPay.PayBuilder \u5728\u6784\u5efa OverseaPay.PayBuilder \u7684\u65f6\u5019\uff0c\u9700\u8981\u8bbe\u7f6e\u4ee5\u4e0b\u53c2\u6570\uff1a isGoogleSubscription : \u662f\u5426\u662fGoogle Play\u8ba2\u9605\u3002 userId : \u7528\u6237id\u3002\u7528\u4e8e\u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u6709\u8ba2\u9605\uff0c\u4ee5\u53ca\u6839\u636e\u7528\u6237id(\u533a\u5206\u7528\u6237)\u6765\u4fdd\u5b58\u7528\u6237\u7684\u6f0f\u5355\u4fe1\u606f\u3002 hidePayPal : \u9690\u85cfPayPal\u652f\u4ed8\u9009\u9879\u3002Google Play\u8ba2\u9605\u9700\u8981\u9690\u85cfPayPal\u652f\u4ed8 useNewGooglePay : \u662f\u5426\u542f\u7528\u65b0\u7684Google Pay\u652f\u4ed8\u903b\u8f91\u3002\u516c\u5171\u5e93\u91cc\u9762\u4e3a\u4e86\u4e0d\u5f71\u54cd\u5176\u4ed6app\u4e1a\u52a1\uff0c\u72ec\u7acb\u51fa NewGooglePayLogic \u7c7b\uff0c\u8be5\u7c7b\u53ef\u542f\u7528\u8ba2\u9605\uff0c\u540c\u65f6\u517c\u5bb9Google Play\u666e\u901a\u5546\u54c1\u8d2d\u4e70\u3002 OverseaPay . PayBuilder builder = new OverseaPay . PayBuilder (); String userId = userInfo . getUser () == null ? \"\" : userInfo . getUser (). getUser_id (); //Google play builder . setToken ( userInfo . getIdentity_token ()) . setGoogleSubscription ( isSubscription ) // \u662f\u5426\u662f\u8ba2\u9605\u5546\u54c1 . setHidePayPal ( isSubscription ) // Google Play\u8ba2\u9605\u5546\u54c1\u9690\u85cfPayPal\u652f\u4ed8 . setGoogleSku ( googleSku ) // \u5546\u54c1id . setUseNewGooglePay ( true ) // \u542f\u7528\u65b0\u7684Google Pay\u652f\u4ed8\u903b\u8f91 . setUserId ( userId ) // \u7528\u6237id . setShowPrice ( \"$\" + ( isSubscription ? googlePrice : showPrice )); \u68c0\u6d4b\u6f0f\u5355\u5e76\u8865\u5145\u63d0\u4ea4 \u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u9700\u6c42\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u68c0\u6d4b\u6f0f\u5355\u60c5\u51b5\u3002 identityToken : \u7528\u6237\u767b\u5f55\u9a8c\u8bc1token, \u63d0\u4ea4\u8ba2\u5355\u6570\u636e\u9700\u8981\u4f7f\u7528\uff1b userId : \u7528\u6237id\uff0c\u67e5\u8be2\u8be5\u7528\u6237\u7684\u6f0f\u5355\u9700\u8981\u4f7f\u7528\uff1b GooglePayOrderManager . getInstance ( getContext ()) . checkUnUploadGooglePayOrder ( identityToken , userId ); \u6f0f\u5355\u6570\u636e\u63d0\u4ea4\u76d1\u542c(\u53ef\u9009) \u53ef\u901a\u8fc7 GooglePayOrderManager \u7684 registerUploadListener \u65b9\u6cd5\u76d1\u542c\u6f0f\u5355\u63d0\u4ea4\u6210\u529f\u5931\u8d25\u60c5\u51b5\u3002 private void checkGooglePlayOrder () { // \u6ce8\u518c\u63d0\u4ea4Google Play\u8ba2\u5355\u76d1\u542c GooglePayOrderManager . getInstance ( getApplicationContext ()). registerUploadListener ( new GooglePayOrderManager . GooglePayUploadListener () { @Override public void onUploadSuccess () { // \u66f4\u65b0vip\u4fe1\u606f UserInfo userInfo = LoginManager . getInstance (). getUserInfo (); VipUtil . loadVipInfo ( userInfo ); } @Override public void onUploadFail ( String errorJson ) { Logger . e ( \"onUploadFail: \" + errorJson ); LogRecordHelper . getInstance (). uploadLogRecord ( LogRecord . CLICK_GOOGLE_PLAY_ORDER_FAIL , errorJson ); } }); }","title":"Google Pay"},{"location":"Google%20Play%E8%AE%A2%E9%98%85%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3/#overseapaypaybuilder","text":"\u5728\u6784\u5efa OverseaPay.PayBuilder \u7684\u65f6\u5019\uff0c\u9700\u8981\u8bbe\u7f6e\u4ee5\u4e0b\u53c2\u6570\uff1a isGoogleSubscription : \u662f\u5426\u662fGoogle Play\u8ba2\u9605\u3002 userId : \u7528\u6237id\u3002\u7528\u4e8e\u67e5\u8be2\u8be5\u7528\u6237\u662f\u5426\u6709\u8ba2\u9605\uff0c\u4ee5\u53ca\u6839\u636e\u7528\u6237id(\u533a\u5206\u7528\u6237)\u6765\u4fdd\u5b58\u7528\u6237\u7684\u6f0f\u5355\u4fe1\u606f\u3002 hidePayPal : \u9690\u85cfPayPal\u652f\u4ed8\u9009\u9879\u3002Google Play\u8ba2\u9605\u9700\u8981\u9690\u85cfPayPal\u652f\u4ed8 useNewGooglePay : \u662f\u5426\u542f\u7528\u65b0\u7684Google Pay\u652f\u4ed8\u903b\u8f91\u3002\u516c\u5171\u5e93\u91cc\u9762\u4e3a\u4e86\u4e0d\u5f71\u54cd\u5176\u4ed6app\u4e1a\u52a1\uff0c\u72ec\u7acb\u51fa NewGooglePayLogic \u7c7b\uff0c\u8be5\u7c7b\u53ef\u542f\u7528\u8ba2\u9605\uff0c\u540c\u65f6\u517c\u5bb9Google Play\u666e\u901a\u5546\u54c1\u8d2d\u4e70\u3002 OverseaPay . PayBuilder builder = new OverseaPay . PayBuilder (); String userId = userInfo . getUser () == null ? \"\" : userInfo . getUser (). getUser_id (); //Google play builder . setToken ( userInfo . getIdentity_token ()) . setGoogleSubscription ( isSubscription ) // \u662f\u5426\u662f\u8ba2\u9605\u5546\u54c1 . setHidePayPal ( isSubscription ) // Google Play\u8ba2\u9605\u5546\u54c1\u9690\u85cfPayPal\u652f\u4ed8 . setGoogleSku ( googleSku ) // \u5546\u54c1id . setUseNewGooglePay ( true ) // \u542f\u7528\u65b0\u7684Google Pay\u652f\u4ed8\u903b\u8f91 . setUserId ( userId ) // \u7528\u6237id . setShowPrice ( \"$\" + ( isSubscription ? googlePrice : showPrice ));","title":"\u6784\u5efaOverseaPay.PayBuilder"},{"location":"Google%20Play%E8%AE%A2%E9%98%85%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3/#_1","text":"\u6839\u636e\u81ea\u5df1\u7684\u4e1a\u52a1\u9700\u6c42\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u68c0\u6d4b\u6f0f\u5355\u60c5\u51b5\u3002 identityToken : \u7528\u6237\u767b\u5f55\u9a8c\u8bc1token, \u63d0\u4ea4\u8ba2\u5355\u6570\u636e\u9700\u8981\u4f7f\u7528\uff1b userId : \u7528\u6237id\uff0c\u67e5\u8be2\u8be5\u7528\u6237\u7684\u6f0f\u5355\u9700\u8981\u4f7f\u7528\uff1b GooglePayOrderManager . getInstance ( getContext ()) . checkUnUploadGooglePayOrder ( identityToken , userId );","title":"\u68c0\u6d4b\u6f0f\u5355\u5e76\u8865\u5145\u63d0\u4ea4"},{"location":"Google%20Play%E8%AE%A2%E9%98%85%E6%8E%A5%E5%85%A5%E6%96%87%E6%A1%A3/#_2","text":"\u53ef\u901a\u8fc7 GooglePayOrderManager \u7684 registerUploadListener \u65b9\u6cd5\u76d1\u542c\u6f0f\u5355\u63d0\u4ea4\u6210\u529f\u5931\u8d25\u60c5\u51b5\u3002 private void checkGooglePlayOrder () { // \u6ce8\u518c\u63d0\u4ea4Google Play\u8ba2\u5355\u76d1\u542c GooglePayOrderManager . getInstance ( getApplicationContext ()). registerUploadListener ( new GooglePayOrderManager . GooglePayUploadListener () { @Override public void onUploadSuccess () { // \u66f4\u65b0vip\u4fe1\u606f UserInfo userInfo = LoginManager . getInstance (). getUserInfo (); VipUtil . loadVipInfo ( userInfo ); } @Override public void onUploadFail ( String errorJson ) { Logger . e ( \"onUploadFail: \" + errorJson ); LogRecordHelper . getInstance (). uploadLogRecord ( LogRecord . CLICK_GOOGLE_PLAY_ORDER_FAIL , errorJson ); } }); }","title":"\u6f0f\u5355\u6570\u636e\u63d0\u4ea4\u76d1\u542c(\u53ef\u9009)"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/","text":"\u6982\u8ff0 \u6574\u4f53\u6846\u67b6\u91c7\u7528 Kotlin+Hilt+Retrofit+OkHttp+Coroutines \u3002\u91c7\u7528 Hilt \u6765\u8fdb\u884c\u5bf9\u8c61\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c OkHttp \u3001 Retrofit \u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c Coroutines \u8fdb\u884c\u5f02\u6b65\u64cd\u4f5c(\u7f51\u7edc\u8bf7\u6c42\u3001\u6570\u636e\u5e93\u5904\u7406\u3001\u5bc6\u96c6\u8ba1\u7b97\u7b49)\u3002 \u57fa\u7840\u4fe1\u606f\u5c01\u88c5 1\u3001 BaseApplication \u5c01\u88c5 BaseApplication \u9700\u8981\u4f7f\u7528 @HiltAndroidApp \u6ce8\u89e3\uff0c\u65b9\u4fbf\u540e\u7eed Hilt \u5bf9\u76f8\u5e94\u7684\u5bf9\u8c61\u8fdb\u884c\u4f9d\u8d56\u7ba1\u7406\u3002 @HiltAndroidApp class BaseApplication : Application () { override fun onCreate () { super . onCreate () instance = this } companion object { private lateinit var instance : BaseApplication fun getInstance (): BaseApplication = instance } } 2\u3001\u5168\u5c40\u5b9e\u4f8b\u4f7f\u5c01\u88c5 \u7f51\u7edc\u8bf7\u6c42\u5b9e\u4f8b ApiService \u5bf9\u8c61\u521b\u5efa\u3002\u4f7f\u7528 Hilt \u6765\u63d0\u4f9b\u5bf9\u8c61\u7684\u7c7b\u9700\u8981\u4f7f\u7528 @Module \u6ce8\u89e3\uff0c\u540c\u65f6\uff0c\u4f7f\u7528 @InstallIn \u6ce8\u89e3\u6765\u6807\u8bc6\u8be5\u7c7b\u6240\u5177\u6709\u7684\u751f\u547d\u5468\u671f\u3002\u7f51\u7edc\u8bf7\u6c42\u5c5e\u4e8e\u5168\u5c40\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 Hilt \u63d0\u4f9b\u7684 SingletonComponent \u6765\u8868\u793a\u5176\u5168\u5c40\u5355\u4f8b\u5c5e\u6027\u3002\\ \u6240\u6709\u63d0\u4f9b\u5bf9\u8c61\u7684\u65b9\u6cd5\u9700\u8981\u4f7f\u7528 @Provides \u6ce8\u89e3\uff0c \\ @Singleton \u6ce8\u89e3\u6807\u8bc6\u8be5\u65b9\u6cd5\u63d0\u4f9b\u7684\u5b9e\u4f8b\u4e3a\u5355\u4f8b\u5bf9\u8c61\u3002 @Module @InstallIn ( SingletonComponent :: class ) object CommonModule { ... @Singleton @Provides fun provideApiService (): ApiService { return Retrofit . Builder () . client ( OkHttpClientFactory . createUnsafeOkHttpClient ()) . addConverterFactory ( GsonConverterFactory . create ()) . baseUrl ( ApiService . BASE_URL ) . build () . create ( ApiService :: class . java ) } ... } ApiService \u4e2d\u7684\u63a5\u53e3\u51fd\u6570\u4f7f\u7528 suspend \u5173\u952e\u5b57\u4fee\u9970\u6807\u8bc6\u4e3a\u6302\u8d77\u51fd\u6570\uff0c\u65b9\u4fbf\u540e\u7eed\u5728\u534f\u7a0b\u4e2d\u8c03\u7528\u3002 interface ApiService { @GET ( \"article/list/{page}/json\" ) suspend fun getHomeArticles ( @Path ( \"page\" ) page : Int ): BaseBean < ArticleData > @GET ( \"banner/json\" ) suspend fun getHomeBanner (): BaseBean < List < BannerData >> companion object { const val BASE_URL = \"https://www.wanandroid.com/\" } } 3\u3001\u57fa\u7c7b\u5c01\u88c5 BaseActivity : abstract class BaseActivity < V : ViewDataBinding > : AppCompatActivity () { protected lateinit var binding : V // init data binding. abstract fun initBinding (): V // init your something... abstract fun initEvent ( savedInstanceState : Bundle?) // define the status bar text color(black or white). open fun isDarkStatusBarText (): Boolean = true open fun preInflateView () {} override fun onCreate ( savedInstanceState : Bundle?) { // Set status bar text color. setStatusBarTextColor ( isDarkStatusBarText ()) preInflateView () super . onCreate ( savedInstanceState ) binding = initBinding () setContentView ( binding . root ) initEvent ( savedInstanceState ) } override fun onOptionsItemSelected ( item : MenuItem ): Boolean { if ( item . itemId == android . R . id . home ) finish () return super . onOptionsItemSelected ( item ) } } BaseFragment : abstract class BaseFragment < V : ViewDataBinding > : Fragment () { protected lateinit var binding : V // init data binding. abstract fun initBinding ( inflater : LayoutInflater , container : ViewGroup?, savedInstanceState : Bundle?) : V // init your something... abstract fun initEvent () override fun onCreateView ( inflater : LayoutInflater , container : ViewGroup?, savedInstanceState : Bundle?) : View? { binding = initBinding ( inflater , container , savedInstanceState ) return binding . root } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) initEvent () } } \u754c\u9762\u793a\u4f8b \u4f7f\u7528 Hilt \u6ce8\u89e3\u540e\uff0cAndroid\u4e2d\u7684\u56db\u5927\u7ec4\u4ef6\u9700\u8981\u4f7f\u7528 @AndroidEntryPoint \u6ce8\u89e3\uff0c\u8fd9\u6837\u5728\u56db\u5927\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u5176\u4ed6\u5bf9\u8c61\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6ce8\u89e3\u6765\u8fdb\u884c\u5bf9\u8c61\u7684\u4f9d\u8d56\u6ce8\u5165\u3002 @AndroidEntryPoint class MainActivity : BaseActivity < ActivityMainBinding > () { private val mainViewModel by viewModels < MainViewModel > () override fun initBinding (): ActivityMainBinding = ActivityMainBinding . inflate ( layoutInflater ) override fun initEvent ( savedInstanceState : Bundle?) { val navController = findNavController ( R . id . nav_host_fragment_activity_main ) binding . navView . setupWithNavController ( navController ) // \u8bf7\u6c42banner\u6570\u636e mainViewModel . requestBannerData () mainViewModel . bannerList . observe ( this ) { showToast ( \"Banner size: ${ it . size } \" ) } } } \u901a\u8fc7Kotlin\u6269\u5c55\u51fd\u6570\u7279\u6027\uff0c\u5728 Activity \u4e2d\u83b7\u53d6 ViewModel \u5bf9\u8c61\u4fbf\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u4e86\u3002\u5e76\u4e14 ViewModel \u7684\u751f\u547d\u5468\u671f\u4e5f\u4e0e Activity \u8fdb\u884c\u4e86\u7ed1\u5b9a\u3002 @HiltViewModel class MainViewModel @Inject constructor () : ViewModel () { @SuppressLint ( \"StaticFieldLeak\" ) @Inject @ApplicationContext lateinit var context : Context @Inject lateinit var apiService : ApiService val bannerList = MutableLiveData < List < BannerData >> () fun requestBannerData () { // ViewModel\u6269\u5c55\u51fd\u6570 requestDataFromServer ({ apiService . getHomeBanner () }, { if ( it . isSuccess ) { val resultList = it . getOrNull () if ( resultList != null ) { bannerList . postValue ( resultList ) } } else { context . showToast ( it . exceptionOrNull () ?. showMessage ) } }) } } Hilt \u4e2d\uff0c\u4e5f\u6709\u4e00\u4e2a\u4e13\u95e8\u7684 @HiltViewModel \u6ce8\u89e3\u4e13\u95e8\u7528\u6765\u6ce8\u91ca ViewModel \uff0c\u8fd9\u6837\u5728 ViewModel \u4e2d\u4fbf\u80fd\u4f7f\u7528\u6ce8\u89e3\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5230\u76f8\u5e94\u7684\u4f9d\u8d56\u5bf9\u8c61\u4e86\u3002\\ requestDataFromServer \u51fd\u6570\u662f\u5bf9 ViewModel \u8fdb\u884c\u6269\u5c55\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u5904\u7406\u3002 /** \u666e\u901a\u4ece\u670d\u52a1\u5668\u8bf7\u6c42\u6570\u636e\u7ed3\u679c\u3002 * [block] \u8bf7\u6c42\u63a5\u53e3\u6302\u8d77\u51fd\u6570\uff1b\u8be5\u51fd\u6570\u4f1a\u5728IO\u5b50\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f[BaseBean]\u5b50\u7c7b\u578b * [result] \u8bf7\u6c42\u7ed3\u679c\u56de\u8c03\u51fd\u6570\uff1b * */ fun < T > ViewModel . requestDataFromServer ( block : suspend () -> BaseBean < T > , result : ( ResponseResult < T?> ) -> Unit ) { viewModelScope . launch { kotlin . runCatching { withContext ( Dispatchers . IO ) { val blockResult = block () if ( blockResult . errorCode == 0 ) { blockResult . data } else { throw ApiException ( blockResult . errorCode , blockResult . errorMsg , blockResult . errorMsg ) } } }. onSuccess { result ( ResponseResult . success ( it )) }. onFailure { it . printStackTrace () result ( ResponseResult . failure ( it )) } } } viewModelScope \u662f ViewModel \u5185\u7f6e\u7684\u4e00\u4e2a\u5173\u4e8e\u534f\u7a0b\u4f5c\u7528\u57df\u7684\u6210\u5458\u53d8\u91cf\u3002\u4f7f\u7528\u5b83\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u8017\u65f6\u64cd\u4f5c\u3002\u8fd9\u6837\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u6ce8 Activity \u7684\u751f\u547d\u5468\u671f\uff0c\u56e0\u4e3a ViewModel \u4e0e Activity \u7684\u751f\u547d\u5468\u671f\u662f\u76f8\u7ed1\u5b9a\u7684\uff0c\u5728 Activity \u9500\u6bc1\u7684\u65f6\u5019\uff0c ViewModel \u4f1a\u505a\u76f8\u5e94\u7684\u6e05\u7406\u5de5\u4f5c\u3002\u8fd9\u6837\u4e00\u4e2a\u8bf7\u6c42\u5c31\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u4e86\u3002 \u5b8c\u6574\u7684demo\u793a\u4f8b\u5730\u5740\uff1ahttps://github.com/sqsong66/JetpackMVVMSample \u793a\u4f8b\u4e2d\u8fd8\u5c55\u793a\u4e86Paging3\u6765\u8fdb\u884c\u5206\u9875\u5217\u8868\u6570\u636e\u8bf7\u6c42\uff0c\u76f8\u6bd4\u4f20\u7edf\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u5904\u7406\u663e\u5f97\u66f4\u52a0\u7b80\u6d01\u7b80\u5355\u3002\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u4e0b\u8f7ddemo\u793a\u4f8b\u67e5\u770b\u3002","title":"Jetpack MVVM"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#_1","text":"\u6574\u4f53\u6846\u67b6\u91c7\u7528 Kotlin+Hilt+Retrofit+OkHttp+Coroutines \u3002\u91c7\u7528 Hilt \u6765\u8fdb\u884c\u5bf9\u8c61\u7684\u4f9d\u8d56\u6ce8\u5165\uff0c OkHttp \u3001 Retrofit \u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\uff0c Coroutines \u8fdb\u884c\u5f02\u6b65\u64cd\u4f5c(\u7f51\u7edc\u8bf7\u6c42\u3001\u6570\u636e\u5e93\u5904\u7406\u3001\u5bc6\u96c6\u8ba1\u7b97\u7b49)\u3002","title":"\u6982\u8ff0"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#_2","text":"","title":"\u57fa\u7840\u4fe1\u606f\u5c01\u88c5"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#1baseapplication","text":"BaseApplication \u9700\u8981\u4f7f\u7528 @HiltAndroidApp \u6ce8\u89e3\uff0c\u65b9\u4fbf\u540e\u7eed Hilt \u5bf9\u76f8\u5e94\u7684\u5bf9\u8c61\u8fdb\u884c\u4f9d\u8d56\u7ba1\u7406\u3002 @HiltAndroidApp class BaseApplication : Application () { override fun onCreate () { super . onCreate () instance = this } companion object { private lateinit var instance : BaseApplication fun getInstance (): BaseApplication = instance } }","title":"1\u3001BaseApplication\u5c01\u88c5"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#2","text":"\u7f51\u7edc\u8bf7\u6c42\u5b9e\u4f8b ApiService \u5bf9\u8c61\u521b\u5efa\u3002\u4f7f\u7528 Hilt \u6765\u63d0\u4f9b\u5bf9\u8c61\u7684\u7c7b\u9700\u8981\u4f7f\u7528 @Module \u6ce8\u89e3\uff0c\u540c\u65f6\uff0c\u4f7f\u7528 @InstallIn \u6ce8\u89e3\u6765\u6807\u8bc6\u8be5\u7c7b\u6240\u5177\u6709\u7684\u751f\u547d\u5468\u671f\u3002\u7f51\u7edc\u8bf7\u6c42\u5c5e\u4e8e\u5168\u5c40\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 Hilt \u63d0\u4f9b\u7684 SingletonComponent \u6765\u8868\u793a\u5176\u5168\u5c40\u5355\u4f8b\u5c5e\u6027\u3002\\ \u6240\u6709\u63d0\u4f9b\u5bf9\u8c61\u7684\u65b9\u6cd5\u9700\u8981\u4f7f\u7528 @Provides \u6ce8\u89e3\uff0c \\ @Singleton \u6ce8\u89e3\u6807\u8bc6\u8be5\u65b9\u6cd5\u63d0\u4f9b\u7684\u5b9e\u4f8b\u4e3a\u5355\u4f8b\u5bf9\u8c61\u3002 @Module @InstallIn ( SingletonComponent :: class ) object CommonModule { ... @Singleton @Provides fun provideApiService (): ApiService { return Retrofit . Builder () . client ( OkHttpClientFactory . createUnsafeOkHttpClient ()) . addConverterFactory ( GsonConverterFactory . create ()) . baseUrl ( ApiService . BASE_URL ) . build () . create ( ApiService :: class . java ) } ... } ApiService \u4e2d\u7684\u63a5\u53e3\u51fd\u6570\u4f7f\u7528 suspend \u5173\u952e\u5b57\u4fee\u9970\u6807\u8bc6\u4e3a\u6302\u8d77\u51fd\u6570\uff0c\u65b9\u4fbf\u540e\u7eed\u5728\u534f\u7a0b\u4e2d\u8c03\u7528\u3002 interface ApiService { @GET ( \"article/list/{page}/json\" ) suspend fun getHomeArticles ( @Path ( \"page\" ) page : Int ): BaseBean < ArticleData > @GET ( \"banner/json\" ) suspend fun getHomeBanner (): BaseBean < List < BannerData >> companion object { const val BASE_URL = \"https://www.wanandroid.com/\" } }","title":"2\u3001\u5168\u5c40\u5b9e\u4f8b\u4f7f\u5c01\u88c5"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#3","text":"BaseActivity : abstract class BaseActivity < V : ViewDataBinding > : AppCompatActivity () { protected lateinit var binding : V // init data binding. abstract fun initBinding (): V // init your something... abstract fun initEvent ( savedInstanceState : Bundle?) // define the status bar text color(black or white). open fun isDarkStatusBarText (): Boolean = true open fun preInflateView () {} override fun onCreate ( savedInstanceState : Bundle?) { // Set status bar text color. setStatusBarTextColor ( isDarkStatusBarText ()) preInflateView () super . onCreate ( savedInstanceState ) binding = initBinding () setContentView ( binding . root ) initEvent ( savedInstanceState ) } override fun onOptionsItemSelected ( item : MenuItem ): Boolean { if ( item . itemId == android . R . id . home ) finish () return super . onOptionsItemSelected ( item ) } } BaseFragment : abstract class BaseFragment < V : ViewDataBinding > : Fragment () { protected lateinit var binding : V // init data binding. abstract fun initBinding ( inflater : LayoutInflater , container : ViewGroup?, savedInstanceState : Bundle?) : V // init your something... abstract fun initEvent () override fun onCreateView ( inflater : LayoutInflater , container : ViewGroup?, savedInstanceState : Bundle?) : View? { binding = initBinding ( inflater , container , savedInstanceState ) return binding . root } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) initEvent () } }","title":"3\u3001\u57fa\u7c7b\u5c01\u88c5"},{"location":"Jetpack%20MVVM%E6%9E%B6%E6%9E%84%E6%B5%85%E6%9E%90/#_3","text":"\u4f7f\u7528 Hilt \u6ce8\u89e3\u540e\uff0cAndroid\u4e2d\u7684\u56db\u5927\u7ec4\u4ef6\u9700\u8981\u4f7f\u7528 @AndroidEntryPoint \u6ce8\u89e3\uff0c\u8fd9\u6837\u5728\u56db\u5927\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u5176\u4ed6\u5bf9\u8c61\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6ce8\u89e3\u6765\u8fdb\u884c\u5bf9\u8c61\u7684\u4f9d\u8d56\u6ce8\u5165\u3002 @AndroidEntryPoint class MainActivity : BaseActivity < ActivityMainBinding > () { private val mainViewModel by viewModels < MainViewModel > () override fun initBinding (): ActivityMainBinding = ActivityMainBinding . inflate ( layoutInflater ) override fun initEvent ( savedInstanceState : Bundle?) { val navController = findNavController ( R . id . nav_host_fragment_activity_main ) binding . navView . setupWithNavController ( navController ) // \u8bf7\u6c42banner\u6570\u636e mainViewModel . requestBannerData () mainViewModel . bannerList . observe ( this ) { showToast ( \"Banner size: ${ it . size } \" ) } } } \u901a\u8fc7Kotlin\u6269\u5c55\u51fd\u6570\u7279\u6027\uff0c\u5728 Activity \u4e2d\u83b7\u53d6 ViewModel \u5bf9\u8c61\u4fbf\u53d8\u5f97\u66f4\u52a0\u7b80\u5355\u4e86\u3002\u5e76\u4e14 ViewModel \u7684\u751f\u547d\u5468\u671f\u4e5f\u4e0e Activity \u8fdb\u884c\u4e86\u7ed1\u5b9a\u3002 @HiltViewModel class MainViewModel @Inject constructor () : ViewModel () { @SuppressLint ( \"StaticFieldLeak\" ) @Inject @ApplicationContext lateinit var context : Context @Inject lateinit var apiService : ApiService val bannerList = MutableLiveData < List < BannerData >> () fun requestBannerData () { // ViewModel\u6269\u5c55\u51fd\u6570 requestDataFromServer ({ apiService . getHomeBanner () }, { if ( it . isSuccess ) { val resultList = it . getOrNull () if ( resultList != null ) { bannerList . postValue ( resultList ) } } else { context . showToast ( it . exceptionOrNull () ?. showMessage ) } }) } } Hilt \u4e2d\uff0c\u4e5f\u6709\u4e00\u4e2a\u4e13\u95e8\u7684 @HiltViewModel \u6ce8\u89e3\u4e13\u95e8\u7528\u6765\u6ce8\u91ca ViewModel \uff0c\u8fd9\u6837\u5728 ViewModel \u4e2d\u4fbf\u80fd\u4f7f\u7528\u6ce8\u89e3\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5230\u76f8\u5e94\u7684\u4f9d\u8d56\u5bf9\u8c61\u4e86\u3002\\ requestDataFromServer \u51fd\u6570\u662f\u5bf9 ViewModel \u8fdb\u884c\u6269\u5c55\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u5904\u7406\u3002 /** \u666e\u901a\u4ece\u670d\u52a1\u5668\u8bf7\u6c42\u6570\u636e\u7ed3\u679c\u3002 * [block] \u8bf7\u6c42\u63a5\u53e3\u6302\u8d77\u51fd\u6570\uff1b\u8be5\u51fd\u6570\u4f1a\u5728IO\u5b50\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u8fd4\u56de\u7684\u7ed3\u679c\u662f[BaseBean]\u5b50\u7c7b\u578b * [result] \u8bf7\u6c42\u7ed3\u679c\u56de\u8c03\u51fd\u6570\uff1b * */ fun < T > ViewModel . requestDataFromServer ( block : suspend () -> BaseBean < T > , result : ( ResponseResult < T?> ) -> Unit ) { viewModelScope . launch { kotlin . runCatching { withContext ( Dispatchers . IO ) { val blockResult = block () if ( blockResult . errorCode == 0 ) { blockResult . data } else { throw ApiException ( blockResult . errorCode , blockResult . errorMsg , blockResult . errorMsg ) } } }. onSuccess { result ( ResponseResult . success ( it )) }. onFailure { it . printStackTrace () result ( ResponseResult . failure ( it )) } } } viewModelScope \u662f ViewModel \u5185\u7f6e\u7684\u4e00\u4e2a\u5173\u4e8e\u534f\u7a0b\u4f5c\u7528\u57df\u7684\u6210\u5458\u53d8\u91cf\u3002\u4f7f\u7528\u5b83\u5f00\u542f\u4e00\u4e2a\u534f\u7a0b\uff0c\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u8017\u65f6\u64cd\u4f5c\u3002\u8fd9\u6837\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u6ce8 Activity \u7684\u751f\u547d\u5468\u671f\uff0c\u56e0\u4e3a ViewModel \u4e0e Activity \u7684\u751f\u547d\u5468\u671f\u662f\u76f8\u7ed1\u5b9a\u7684\uff0c\u5728 Activity \u9500\u6bc1\u7684\u65f6\u5019\uff0c ViewModel \u4f1a\u505a\u76f8\u5e94\u7684\u6e05\u7406\u5de5\u4f5c\u3002\u8fd9\u6837\u4e00\u4e2a\u8bf7\u6c42\u5c31\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u4e86\u3002 \u5b8c\u6574\u7684demo\u793a\u4f8b\u5730\u5740\uff1ahttps://github.com/sqsong66/JetpackMVVMSample \u793a\u4f8b\u4e2d\u8fd8\u5c55\u793a\u4e86Paging3\u6765\u8fdb\u884c\u5206\u9875\u5217\u8868\u6570\u636e\u8bf7\u6c42\uff0c\u76f8\u6bd4\u4f20\u7edf\u7684\u5206\u9875\u5217\u8868\u6570\u636e\u5904\u7406\u663e\u5f97\u66f4\u52a0\u7b80\u6d01\u7b80\u5355\u3002\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u4e0b\u8f7ddemo\u793a\u4f8b\u67e5\u770b\u3002","title":"\u754c\u9762\u793a\u4f8b"},{"location":"global/","text":"\u5168\u5c40\u914d\u7f6e \u62a0\u56fe\u7684\u5168\u5c40\u914d\u7f6e\u4e3b\u8981\u662f\u5728 GlobalApplication \u4e2d\u3002 GlobalApplication \u4e2d\u7684 initModel() \u65b9\u6cd5\u662f\u7528\u6765\u521d\u59cb\u5316\u4e2d\u53f0(\u516c\u5171\u5e93)\u8fd9\u5404\u5e93\u7684\u3002 \u521d\u59cb\u5316\u5404\u6a21\u5757 \u76ee\u524d\u8bb8\u591a\u7684\u516c\u5171\u6a21\u5757\u662f\u5728 CommonBusinessApplication \u4e2d\u8fdb\u884c\u521d\u59cb\u5316\u7684\uff0c\u5916\u90e8\u901a\u8fc7 Builder \u6a21\u5f0f\u6784\u5efa\u597d\u76f8\u5173\u6a21\u5757\u53c2\u6570\u8bbe\u7f6e\u7ed9 CommonBusinessApplication \u5728\u5176\u5185\u90e8\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u65e5\u5fd7(Log)\u6a21\u5757 \u4e3b\u8981\u662f\u901a\u8fc7\u6784\u5efa LogBuilder \uff0c\u8bbe\u7f6e\u65e5\u5fd7\u6807\u7b7e\u3002 // \u65e5\u5fd7\u53c2\u6570 LogBuilder logBuilder = new LogBuilder (); logBuilder . setTag ( \"AiCut\" ); ServerFacade\u6a21\u5757 \u8be5\u6a21\u5757\u4f4d\u4e8e commonLib \u5e93\u7684 ServerFacade \u4e2d\uff0c\u6570\u636e\u7684\u914d\u7f6e\u5728 ServerFacadeApplication \u7c7b\u4e2d\u3002 \u8be5\u6a21\u5757\u7684\u529f\u80fd\u4e3b\u8981\u6709\uff1a \u610f\u89c1\u53cd\u9988\u65e5\u5fd7\u4e0a\u62a5\uff1b OkHttp \u521d\u59cb\u5316(\u8bbe\u7f6e UserAgent \u3001\u8bf7\u6c42\u5934\u8bbe\u7f6eIP\u5730\u5740)\uff1b APP\u5347\u7ea7\u68c0\u6d4b\u3002 \u5728 GlobalApplication \u4e2d\u4e3b\u8981\u662f\u901a\u8fc7\u6784\u5efa ServerFacedBuilder \u6765\u8bbe\u7f6e\u4ee5\u4e0a\u529f\u80fd\u6240\u9700\u8981\u7684\u5404PO\u7ebf\u4ea7\u54c1\u5bf9\u5e94\u7684\u53c2\u6570\u4fe1\u606f\u3002 setProId() : \u8bbe\u7f6e\u4ea7\u54c1id\uff0c\u62a0\u56fe\u5bf9\u5e94\u7684\u662f367\uff1b setAppName() : \u8bbe\u7f6eAPP\u540d\u79f0- \u50b2\u8f6f\u62a0\u56fe \uff1b setLogoResource() : \u8bbe\u7f6e\u4ea7\u54c1Logo\u8d44\u6e90\u3002 ServerFacedBuilder serverFacedBuilder = new ServerFacedBuilder (); // \u8bbe\u7f6e\u4ea7\u54c1id,\u8fd9\u91cc\u7528\u6765\u7edf\u8ba1\u65b0\u88c5/\u6d3b\u8dc3\u3001\u5347\u7ea7\u3001feedback serverFacedBuilder . setProId ( AppNameMap . APP_ID_BackgroundEraser ) . setAppName ( getString ( R . string . key_lunch_appname )) . setLogoResource ( R . mipmap . ic_logo_small ); \u5f52\u56e0\u6a21\u5757 \u5f52\u56e0\u6a21\u5757\u4e3b\u8981\u662f\u8bbe\u7f6eAPP\u7684\u540d\u79f0\uff0c\u4ee5\u53ca\u5f52\u56e0SDK\u7684\u79d8\u94a5\u3002 FlyerBuilder flyerBuilder = new FlyerBuilder (); // \u8bbe\u7f6e\u4ea7\u54c1id,\u8fd9\u91cc\u7528\u6765\u5f52\u56e0\u548c\u4e0a\u62a5\u8f6c\u5316\u4e8b\u4ef6 flyerBuilder . setProId ( AppNameMap . APP_ID_BackgroundEraser ) // AppsFlyer\u79d8\u94a5 . setAfDevKey ( \"xxxxxxxxxx\" ); OkHttp \u53c2\u6570\u521d\u59cb\u5316 OkHttp \u7684\u5b9e\u9645\u662f\u5728\u5f52\u56e0\u6a21\u5757\u521d\u59cb\u5316\u7684\uff0c\u4f46\u5176\u5185\u90e8\u521d\u59cb\u5316\u6bd4\u8f83\u7b80\u5355(\u4e3b\u8981\u662f\u8bbe\u7f6e UserAgent \u548c\u5728\u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0ip\u53c2\u6570\uff0c\u53c2\u89c1 ServerFacadeApplication \u4e2d\u7684 init() \u65b9\u6cd5)\u3002 \u5728\u62a0\u56fe\u4e1a\u52a1\u4e2d\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff1a \u65e5\u5fd7\u62e6\u622a\u5668 \uff1a HttpLoggingInterceptor \uff0c\u65b9\u4fbf\u8c03\u8bd5\u8bf7\u6c42\u4fe1\u606f\uff1b \u4e1a\u52a1\u8bf7\u6c42\u5934 \uff1a RequestHeaderInterceptor \u3002 \u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0\u6388\u6743 token \uff0c\u540e\u53f0\u9274\u6743\u7528\uff1b \u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0 wx-real-ip \u3001 User-Agent \uff0c\u540e\u53f0\u6392\u67e5\u95ee\u9898\u7528\uff1b \u62e6\u622a401 token \u5931\u6548\u72b6\u6001\u7801\uff0c\u9700\u8981\u9000\u51fa\u767b\u5f55\uff0c\u91cd\u65b0\u83b7\u53d6\u9274\u6743 token \u3002 \u5207\u6362\u57df\u540d \uff1a\u901a\u8fc7 RetrofitUrlManager \u8fdb\u884c\u57df\u540d\u5207\u6362\u3002\u8be5\u65b9\u5f0f\u4e3b\u8981\u662f\u5bf9\u65b0\u5c01\u88c5\u7684 Retrofit + OkHttp \u8bf7\u6c42\u751f\u6548\u3002\u901a\u8fc7 RetrofitUrlManager \u5c06 baseUrl \u5207\u6362\u6210\u9879\u76ee\u4e1a\u52a1\u7ebf\u7684\u3002 HttpLoggingInterceptor logging = new HttpLoggingInterceptor (); logging . setLevel ( BuildConfig . DEBUG ? HttpLoggingInterceptor . Level . BODY : HttpLoggingInterceptor . Level . NONE ); OkHttpUtils . addInterceptor ( logging ); OkHttpUtils . addInterceptor ( new RequestHeaderInterceptor ()); RetrofitUrlManager . getInstance (). setDebug ( BuildConfig . DEBUG ); RetrofitUrlManager . getInstance (). putDomain ( ApiConstant . KEY_BASE_URL_USER , ApiConstant . BASE_URL_USER ); \u6ce8\u610f \u76ee\u524d\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e24\u5957\u7f51\u7edc\u8bf7\u6c42\u6846\u67b6\uff1a 1. OkHttpUtils \uff1a\u5bf9\u539f\u751f OkHttp \u7684\u5c01\u88c5\uff1b\u76ee\u524d\u9879\u76ee\u4e2d\u5927\u90e8\u5206\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u8fd9\u79cd\u65b9\u5f0f\u3002 2. RetrofitClient \uff1a\u65b0\u5c01\u88c5\u7684\u57fa\u4e8e OkHttp + Retrofit \uff0c\u76ee\u524d\u9879\u76ee\u4e2d\u662f\u5728\u8be5\u57fa\u7840\u4e0a\u914d\u5408 RxJava \u6765\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u3002\u8be5\u5c01\u88c5\u540e\u671f\u4e5f\u53ef\u4ee5\u914d\u5408 Kotlin \u7684\u534f\u7a0b(Coroutines)\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u3002 CommonBusinessApplication \u521d\u59cb\u5316 CommonBusinessApplication \u91cc\u9762\u4e3b\u8981\u914d\u7f6e\u5404\u4e2a\u6a21\u5757\u7684\u4e1a\u52a1\u53c2\u6570\uff0c\u7136\u540e\u5728\u5176\u5185\u90e8\u7edf\u4e00\u521d\u59cb\u5316\u4e2a\u4e1a\u52a1\u6a21\u5757(\u5f52\u56e0\u3001\u65e5\u5fd7\u3001\u57cb\u70b9\u3001\u7f51\u7edc\u8bf7\u6c42\u7b49)\u3002 // \u654f\u611f\u4e1a\u52a1\uff0c\u662f\u5426\u9700\u8981\u540c\u610f\u9690\u79c1\u653f\u7b56\u5f39\u6846\u540e\u521d\u59cb\u5316 boolean isInitAfterAgreePrivacy = InitConfig . TermsDialogHelper . shouldShowTermsDialog ( getApplicationContext ()); CommonBusinessApplication commonBusinessApplication = CommonBusinessApplication . getInstance (); commonBusinessApplication . applicationOnCreate ( this ) // \u8bbe\u7f6e\u65e5\u5fd7 . setLogBuilder ( logBuilder ) // \u8bbe\u7f6eServerFaced\u53c2\u6570 . setServerFacedBuilder ( serverFacedBuilder ) // \u8bbe\u7f6e\u5f52\u56e0\u53c2\u6570 . setFlyerBuilder ( flyerBuilder , mFlyerCallback ) //\u662f\u5426\u9700\u8981\u540c\u610f\u9690\u79c1\u653f\u7b56\u5f39\u6846\u540e\uff0c\u521d\u59cb\u5316\u654f\u611f\u4e1a\u52a1 . setInitAfterAgreePrivacy ( isInitAfterAgreePrivacy ) . init (); Note \u6b64\u5904\u6709\u4e00\u4e2a\u914d\u7f6e\u53c2\u6570 isInitAfterAgreePrivacy ,\u8be5\u53c2\u6570\u4e3b\u8981\u662f\u7528\u6765\u63a7\u5236\uff0c\u5f53\u7b2c\u4e00\u6b21\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u4f1a\u5f39\u51fa\u9690\u79c1\u534f\u8bae\u5bf9\u8bdd\u6846\uff0c\u53ea\u6709\u5f53\u7528\u6237\u7edf\u4e00\u4e86\u9690\u79c1\u534f\u8bae\u4e4b\u540e\u624d\u4f1a\u53bb\u521d\u59cb\u5316\u4e00\u4e9b\u654f\u611f\u4e1a\u52a1\u3002\u5982\u83b7\u53d6Android_ID\u3001\u624b\u673a\u8bbe\u5907\u4fe1\u606f\u7b49(\u76ee\u524d\u5e94\u7528\u5e02\u573a\u5bf9\u83b7\u53d6\u7528\u6237\u9690\u79c1\u6743\u9650\u8fd9\u4e00\u5757\u5ba1\u6838\u6bd4\u8f83\u4e25)\u3002 \u6ce8\u610f OkHttp \u53c2\u6570\u521d\u59cb\u5316\u9700\u8981\u653e\u5230 CommonBusinessApplication \u521d\u59cb\u5316\u4e4b\u524d\uff0c\u56e0\u4e3a OkHttp \u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\u662f\u5728 CommonBusinessApplication \u4e2d\u7684 initServerFacade() \u65b9\u6cd5\u521d\u59cb\u5316\u7684\uff0c\u56e0\u6b64\u5728\u5b9e\u4f8b\u5316 OkHttp \u5fc5\u987b\u8981\u8bbe\u7f6e\u597d\u5176\u53c2\u6570( interceptor )\uff0c\u5426\u5219\u5c06\u4f1a\u51fa\u73b0\u8bbe\u7f6e\u5931\u6548\u3002 OkHttp \u53c2\u6570\u521d\u59cb\u5316","title":"\u5168\u5c40\u914d\u7f6e"},{"location":"global/#_1","text":"\u62a0\u56fe\u7684\u5168\u5c40\u914d\u7f6e\u4e3b\u8981\u662f\u5728 GlobalApplication \u4e2d\u3002 GlobalApplication \u4e2d\u7684 initModel() \u65b9\u6cd5\u662f\u7528\u6765\u521d\u59cb\u5316\u4e2d\u53f0(\u516c\u5171\u5e93)\u8fd9\u5404\u5e93\u7684\u3002","title":"\u5168\u5c40\u914d\u7f6e"},{"location":"global/#_2","text":"\u76ee\u524d\u8bb8\u591a\u7684\u516c\u5171\u6a21\u5757\u662f\u5728 CommonBusinessApplication \u4e2d\u8fdb\u884c\u521d\u59cb\u5316\u7684\uff0c\u5916\u90e8\u901a\u8fc7 Builder \u6a21\u5f0f\u6784\u5efa\u597d\u76f8\u5173\u6a21\u5757\u53c2\u6570\u8bbe\u7f6e\u7ed9 CommonBusinessApplication \u5728\u5176\u5185\u90e8\u8fdb\u884c\u521d\u59cb\u5316\u3002","title":"\u521d\u59cb\u5316\u5404\u6a21\u5757"},{"location":"global/#log","text":"\u4e3b\u8981\u662f\u901a\u8fc7\u6784\u5efa LogBuilder \uff0c\u8bbe\u7f6e\u65e5\u5fd7\u6807\u7b7e\u3002 // \u65e5\u5fd7\u53c2\u6570 LogBuilder logBuilder = new LogBuilder (); logBuilder . setTag ( \"AiCut\" );","title":"\u65e5\u5fd7(Log)\u6a21\u5757"},{"location":"global/#serverfacade","text":"\u8be5\u6a21\u5757\u4f4d\u4e8e commonLib \u5e93\u7684 ServerFacade \u4e2d\uff0c\u6570\u636e\u7684\u914d\u7f6e\u5728 ServerFacadeApplication \u7c7b\u4e2d\u3002 \u8be5\u6a21\u5757\u7684\u529f\u80fd\u4e3b\u8981\u6709\uff1a \u610f\u89c1\u53cd\u9988\u65e5\u5fd7\u4e0a\u62a5\uff1b OkHttp \u521d\u59cb\u5316(\u8bbe\u7f6e UserAgent \u3001\u8bf7\u6c42\u5934\u8bbe\u7f6eIP\u5730\u5740)\uff1b APP\u5347\u7ea7\u68c0\u6d4b\u3002 \u5728 GlobalApplication \u4e2d\u4e3b\u8981\u662f\u901a\u8fc7\u6784\u5efa ServerFacedBuilder \u6765\u8bbe\u7f6e\u4ee5\u4e0a\u529f\u80fd\u6240\u9700\u8981\u7684\u5404PO\u7ebf\u4ea7\u54c1\u5bf9\u5e94\u7684\u53c2\u6570\u4fe1\u606f\u3002 setProId() : \u8bbe\u7f6e\u4ea7\u54c1id\uff0c\u62a0\u56fe\u5bf9\u5e94\u7684\u662f367\uff1b setAppName() : \u8bbe\u7f6eAPP\u540d\u79f0- \u50b2\u8f6f\u62a0\u56fe \uff1b setLogoResource() : \u8bbe\u7f6e\u4ea7\u54c1Logo\u8d44\u6e90\u3002 ServerFacedBuilder serverFacedBuilder = new ServerFacedBuilder (); // \u8bbe\u7f6e\u4ea7\u54c1id,\u8fd9\u91cc\u7528\u6765\u7edf\u8ba1\u65b0\u88c5/\u6d3b\u8dc3\u3001\u5347\u7ea7\u3001feedback serverFacedBuilder . setProId ( AppNameMap . APP_ID_BackgroundEraser ) . setAppName ( getString ( R . string . key_lunch_appname )) . setLogoResource ( R . mipmap . ic_logo_small );","title":"ServerFacade\u6a21\u5757"},{"location":"global/#_3","text":"\u5f52\u56e0\u6a21\u5757\u4e3b\u8981\u662f\u8bbe\u7f6eAPP\u7684\u540d\u79f0\uff0c\u4ee5\u53ca\u5f52\u56e0SDK\u7684\u79d8\u94a5\u3002 FlyerBuilder flyerBuilder = new FlyerBuilder (); // \u8bbe\u7f6e\u4ea7\u54c1id,\u8fd9\u91cc\u7528\u6765\u5f52\u56e0\u548c\u4e0a\u62a5\u8f6c\u5316\u4e8b\u4ef6 flyerBuilder . setProId ( AppNameMap . APP_ID_BackgroundEraser ) // AppsFlyer\u79d8\u94a5 . setAfDevKey ( \"xxxxxxxxxx\" );","title":"\u5f52\u56e0\u6a21\u5757"},{"location":"global/#okhttp","text":"OkHttp \u7684\u5b9e\u9645\u662f\u5728\u5f52\u56e0\u6a21\u5757\u521d\u59cb\u5316\u7684\uff0c\u4f46\u5176\u5185\u90e8\u521d\u59cb\u5316\u6bd4\u8f83\u7b80\u5355(\u4e3b\u8981\u662f\u8bbe\u7f6e UserAgent \u548c\u5728\u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0ip\u53c2\u6570\uff0c\u53c2\u89c1 ServerFacadeApplication \u4e2d\u7684 init() \u65b9\u6cd5)\u3002 \u5728\u62a0\u56fe\u4e1a\u52a1\u4e2d\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff1a \u65e5\u5fd7\u62e6\u622a\u5668 \uff1a HttpLoggingInterceptor \uff0c\u65b9\u4fbf\u8c03\u8bd5\u8bf7\u6c42\u4fe1\u606f\uff1b \u4e1a\u52a1\u8bf7\u6c42\u5934 \uff1a RequestHeaderInterceptor \u3002 \u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0\u6388\u6743 token \uff0c\u540e\u53f0\u9274\u6743\u7528\uff1b \u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0 wx-real-ip \u3001 User-Agent \uff0c\u540e\u53f0\u6392\u67e5\u95ee\u9898\u7528\uff1b \u62e6\u622a401 token \u5931\u6548\u72b6\u6001\u7801\uff0c\u9700\u8981\u9000\u51fa\u767b\u5f55\uff0c\u91cd\u65b0\u83b7\u53d6\u9274\u6743 token \u3002 \u5207\u6362\u57df\u540d \uff1a\u901a\u8fc7 RetrofitUrlManager \u8fdb\u884c\u57df\u540d\u5207\u6362\u3002\u8be5\u65b9\u5f0f\u4e3b\u8981\u662f\u5bf9\u65b0\u5c01\u88c5\u7684 Retrofit + OkHttp \u8bf7\u6c42\u751f\u6548\u3002\u901a\u8fc7 RetrofitUrlManager \u5c06 baseUrl \u5207\u6362\u6210\u9879\u76ee\u4e1a\u52a1\u7ebf\u7684\u3002 HttpLoggingInterceptor logging = new HttpLoggingInterceptor (); logging . setLevel ( BuildConfig . DEBUG ? HttpLoggingInterceptor . Level . BODY : HttpLoggingInterceptor . Level . NONE ); OkHttpUtils . addInterceptor ( logging ); OkHttpUtils . addInterceptor ( new RequestHeaderInterceptor ()); RetrofitUrlManager . getInstance (). setDebug ( BuildConfig . DEBUG ); RetrofitUrlManager . getInstance (). putDomain ( ApiConstant . KEY_BASE_URL_USER , ApiConstant . BASE_URL_USER ); \u6ce8\u610f \u76ee\u524d\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86\u4e24\u5957\u7f51\u7edc\u8bf7\u6c42\u6846\u67b6\uff1a 1. OkHttpUtils \uff1a\u5bf9\u539f\u751f OkHttp \u7684\u5c01\u88c5\uff1b\u76ee\u524d\u9879\u76ee\u4e2d\u5927\u90e8\u5206\u8bf7\u6c42\u4f7f\u7528\u7684\u662f\u8fd9\u79cd\u65b9\u5f0f\u3002 2. RetrofitClient \uff1a\u65b0\u5c01\u88c5\u7684\u57fa\u4e8e OkHttp + Retrofit \uff0c\u76ee\u524d\u9879\u76ee\u4e2d\u662f\u5728\u8be5\u57fa\u7840\u4e0a\u914d\u5408 RxJava \u6765\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u7684\u3002\u8be5\u5c01\u88c5\u540e\u671f\u4e5f\u53ef\u4ee5\u914d\u5408 Kotlin \u7684\u534f\u7a0b(Coroutines)\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u3002","title":"OkHttp\u53c2\u6570\u521d\u59cb\u5316"},{"location":"global/#commonbusinessapplication","text":"CommonBusinessApplication \u91cc\u9762\u4e3b\u8981\u914d\u7f6e\u5404\u4e2a\u6a21\u5757\u7684\u4e1a\u52a1\u53c2\u6570\uff0c\u7136\u540e\u5728\u5176\u5185\u90e8\u7edf\u4e00\u521d\u59cb\u5316\u4e2a\u4e1a\u52a1\u6a21\u5757(\u5f52\u56e0\u3001\u65e5\u5fd7\u3001\u57cb\u70b9\u3001\u7f51\u7edc\u8bf7\u6c42\u7b49)\u3002 // \u654f\u611f\u4e1a\u52a1\uff0c\u662f\u5426\u9700\u8981\u540c\u610f\u9690\u79c1\u653f\u7b56\u5f39\u6846\u540e\u521d\u59cb\u5316 boolean isInitAfterAgreePrivacy = InitConfig . TermsDialogHelper . shouldShowTermsDialog ( getApplicationContext ()); CommonBusinessApplication commonBusinessApplication = CommonBusinessApplication . getInstance (); commonBusinessApplication . applicationOnCreate ( this ) // \u8bbe\u7f6e\u65e5\u5fd7 . setLogBuilder ( logBuilder ) // \u8bbe\u7f6eServerFaced\u53c2\u6570 . setServerFacedBuilder ( serverFacedBuilder ) // \u8bbe\u7f6e\u5f52\u56e0\u53c2\u6570 . setFlyerBuilder ( flyerBuilder , mFlyerCallback ) //\u662f\u5426\u9700\u8981\u540c\u610f\u9690\u79c1\u653f\u7b56\u5f39\u6846\u540e\uff0c\u521d\u59cb\u5316\u654f\u611f\u4e1a\u52a1 . setInitAfterAgreePrivacy ( isInitAfterAgreePrivacy ) . init (); Note \u6b64\u5904\u6709\u4e00\u4e2a\u914d\u7f6e\u53c2\u6570 isInitAfterAgreePrivacy ,\u8be5\u53c2\u6570\u4e3b\u8981\u662f\u7528\u6765\u63a7\u5236\uff0c\u5f53\u7b2c\u4e00\u6b21\u5b89\u88c5\u5e94\u7528\u65f6\uff0c\u4f1a\u5f39\u51fa\u9690\u79c1\u534f\u8bae\u5bf9\u8bdd\u6846\uff0c\u53ea\u6709\u5f53\u7528\u6237\u7edf\u4e00\u4e86\u9690\u79c1\u534f\u8bae\u4e4b\u540e\u624d\u4f1a\u53bb\u521d\u59cb\u5316\u4e00\u4e9b\u654f\u611f\u4e1a\u52a1\u3002\u5982\u83b7\u53d6Android_ID\u3001\u624b\u673a\u8bbe\u5907\u4fe1\u606f\u7b49(\u76ee\u524d\u5e94\u7528\u5e02\u573a\u5bf9\u83b7\u53d6\u7528\u6237\u9690\u79c1\u6743\u9650\u8fd9\u4e00\u5757\u5ba1\u6838\u6bd4\u8f83\u4e25)\u3002 \u6ce8\u610f OkHttp \u53c2\u6570\u521d\u59cb\u5316\u9700\u8981\u653e\u5230 CommonBusinessApplication \u521d\u59cb\u5316\u4e4b\u524d\uff0c\u56e0\u4e3a OkHttp \u5bf9\u8c61\u7684\u5b9e\u4f8b\u5316\u662f\u5728 CommonBusinessApplication \u4e2d\u7684 initServerFacade() \u65b9\u6cd5\u521d\u59cb\u5316\u7684\uff0c\u56e0\u6b64\u5728\u5b9e\u4f8b\u5316 OkHttp \u5fc5\u987b\u8981\u8bbe\u7f6e\u597d\u5176\u53c2\u6570( interceptor )\uff0c\u5426\u5219\u5c06\u4f1a\u51fa\u73b0\u8bbe\u7f6e\u5931\u6548\u3002","title":"CommonBusinessApplication\u521d\u59cb\u5316"},{"location":"global/#okhttp_1","text":"","title":"OkHttp\u53c2\u6570\u521d\u59cb\u5316"},{"location":"main/","text":"\u50b2\u8f6f\u62a0\u56fe","title":"\u50b2\u8f6f\u62a0\u56fe"},{"location":"main/#_1","text":"","title":"\u50b2\u8f6f\u62a0\u56fe"}]}